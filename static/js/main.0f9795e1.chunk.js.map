{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","onClick","clickFunc","id","alt","name","src","image","Wrapper","children","App","state","characters","clickedArray","score","styles","display","console","log","_this","length","document","getElementById","style","setState","includes","push","shuffle","_this2","this","components_Wrapper","map","character","components_CharacterCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"okEAmBeA,MAhBf,SAAuBC,GACtB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,UAAUN,EAAMO,MAC1DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,SAElCV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,UCLDG,MAJf,SAAiBZ,GAChB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,kCCkEzBC,oNA5DbC,MAAQ,CACNC,WAAYA,EACZC,aAAc,GACdC,MAAO,EACPC,OAAQ,CACNC,QAAS,WAKbd,UAAY,SAAAC,GACdc,QAAQC,IAAIC,EAAKR,MAAME,cACoB,KAAnCM,EAAKR,MAAME,aAAaO,QAC1BC,SAASC,eAAe,WAAWC,MAAMP,QAAU,QACnDG,EAAKK,SAAS,CAAEX,aAAc,KAC9BM,EAAKK,SAAS,CAAEV,MAAO,KAIhBK,EAAKR,MAAME,aAAaY,SAAStB,IACxCkB,SAASC,eAAe,YAAYC,MAAMP,QAAU,QACpDG,EAAKK,SAAS,CAAEX,aAAc,KAC9BM,EAAKK,SAAS,CAAEV,MAAO,MAKvBO,SAASC,eAAe,WAAWC,MAAMP,QAAU,OACnDK,SAASC,eAAe,YAAYC,MAAMP,QAAU,OACpDG,EAAKR,MAAME,aAAaa,KAAKvB,GAC7BgB,EAAKK,SAAS,CAAEV,MAAOK,EAAKR,MAAMG,MAAQ,KAI5CK,EAAKK,SAAS,CAAEZ,WAAYe,IAAQf,8EAK7B,IAAAgB,EAAAC,KACP,OACEhC,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,iCAAqD6B,KAAKlB,MAAMG,MAAhE,MACEjB,EAAAC,EAAAC,cAAA,KAAGI,GAAG,UAAUoB,MAAOM,KAAKlB,MAAMI,QAAlC,uEACAlB,EAAAC,EAAAC,cAAA,KAAGI,GAAG,YAAN,uEAED0B,KAAKlB,MAAMC,WAAWmB,IACrB,SAAAC,GAAS,OAAInC,EAAAC,EAAAC,cAACkC,EAAD,CACXC,IAAKF,EAAU7B,GACfA,GAAI6B,EAAU7B,GACdE,KAAM2B,EAAU3B,KAChBE,MAAOyB,EAAUzB,MACjBL,UAAW0B,EAAK1B,sBArDViC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASvB,SAASC,eAAe,SD2H3C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0f9795e1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props){\r\n\treturn (\r\n\t\t<div className=\"card\" onClick={() => props.clickFunc(props.id)}>\r\n\t\t\t<div className=\"image-container\">\r\n\t\t\t\t<img alt={props.name} src={props.image} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>{props.name}</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CharacterCard;","import React from \"react\";\r\n\r\nfunction Wrapper(props){\r\n\treturn <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\nimport CharacterCard from \"./components/CharacterCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport characters from \"./characters.json\";\nimport shuffle from \"shuffle-array\";\nimport './App.css';\n\n// Commented code is for testing\nclass App extends React.Component {\n  state = {\n    characters: characters,\n    clickedArray: [],\n    score: 0,\n    styles: {\n      display: \"none\",\n    }\n  }\n\n  // Function that checks if the clicked person was already clicked\n  clickFunc = id => {\nconsole.log(this.state.clickedArray);\n    if (this.state.clickedArray.length === 11) {\n      document.getElementById(\"won-msg\").style.display = \"block\";\n      this.setState({ clickedArray: [] })\n      this.setState({ score: 0 })\n    }\n\n    // Check if character was clicked already\n    else if (this.state.clickedArray.includes(id)) {\n      document.getElementById(\"lost-msg\").style.display = \"block\";\n      this.setState({ clickedArray: [] })\n      this.setState({ score: 0 })\n    }\n\n    // Else the character has not yet been clicked\n    else {\n      document.getElementById(\"won-msg\").style.display = \"none\";\n      document.getElementById(\"lost-msg\").style.display = \"none\";\n      this.state.clickedArray.push(id);\n      this.setState({ score: this.state.score + 1 })\n    }\n\n    // Comment out the below line to test without shuffling\n    this.setState({ characters: shuffle(characters) })\n  }\n\n\n  // Render the page\n  render() {\n    return (\n      <Wrapper>\n        <h1 className=\"title\">FUTURAMA MEMORY GAME - Score: {this.state.score}/12\n          <p id=\"won-msg\" style={this.state.styles}>Congratulations, you won! You can click a character to start again.</p>\n          <p id=\"lost-msg\">I'm sorry, but you lost. You can click a character to start again.</p>\n        </h1>\n        {this.state.characters.map(\n          character => <CharacterCard\n            key={character.id}\n            id={character.id}\n            name={character.name}\n            image={character.image}\n            clickFunc={this.clickFunc}\n          />\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}